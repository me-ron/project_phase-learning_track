// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "task_manager/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *UserUsecase) DeleteUser(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: _a0
func (_m *UserUsecase) GetUser(_a0 string) (domain.DBUser, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 domain.DBUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.DBUser, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) domain.DBUser); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.DBUser)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *UserUsecase) GetUsers() ([]domain.DBUser, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []domain.DBUser
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.DBUser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.DBUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.DBUser)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0
func (_m *UserUsecase) Login(_a0 domain.UserInput) (domain.DBUser, string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 domain.DBUser
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(domain.UserInput) (domain.DBUser, string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.UserInput) domain.DBUser); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.DBUser)
	}

	if rf, ok := ret.Get(1).(func(domain.UserInput) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(domain.UserInput) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MakeAdmin provides a mock function with given fields: _a0
func (_m *UserUsecase) MakeAdmin(_a0 string) (domain.DBUser, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MakeAdmin")
	}

	var r0 domain.DBUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.DBUser, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) domain.DBUser); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.DBUser)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signup provides a mock function with given fields: _a0
func (_m *UserUsecase) Signup(_a0 domain.UserInput) (domain.DBUser, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 domain.DBUser
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.UserInput) (domain.DBUser, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.UserInput) domain.DBUser); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.DBUser)
	}

	if rf, ok := ret.Get(1).(func(domain.UserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *UserUsecase) UpdateUser(_a0 string, _a1 domain.UserInput) (domain.DBUser, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 domain.DBUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.UserInput) (domain.DBUser, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, domain.UserInput) domain.DBUser); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.DBUser)
	}

	if rf, ok := ret.Get(1).(func(string, domain.UserInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
