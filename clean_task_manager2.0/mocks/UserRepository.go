// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "task_manager/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0
func (_m *UserRepository) CreateUser(_a0 domain.UserInput) (domain.DBUser, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 domain.DBUser
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.UserInput) (domain.DBUser, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.UserInput) domain.DBUser); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.DBUser)
	}

	if rf, ok := ret.Get(1).(func(domain.UserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserByID provides a mock function with given fields: _a0
func (_m *UserRepository) DeleteUserByID(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllUsers provides a mock function with given fields:
func (_m *UserRepository) FindAllUsers() ([]domain.DBUser, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAllUsers")
	}

	var r0 []domain.DBUser
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.DBUser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.DBUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.DBUser)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: _a0
func (_m *UserRepository) FindByEmail(_a0 string) (domain.UserInput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 domain.UserInput
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.UserInput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) domain.UserInput); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.UserInput)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: _a0
func (_m *UserRepository) FindById(_a0 string) (domain.UserInput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 domain.UserInput
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.UserInput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) domain.UserInput); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.UserInput)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserById provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserRepository) UpdateUserById(_a0 string, _a1 domain.UserInput, _a2 bool) (domain.DBUser, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserById")
	}

	var r0 domain.DBUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.UserInput, bool) (domain.DBUser, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, domain.UserInput, bool) domain.DBUser); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(domain.DBUser)
	}

	if rf, ok := ret.Get(1).(func(string, domain.UserInput, bool) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
